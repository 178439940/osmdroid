language: android
jdk: openjdk7
android:
  components:
    # The BuildTools version used by your project
    #- tools  https://stackoverflow.com/a/35485723/1203182
    #- platform-tools  https://stackoverflow.com/a/35485723/1203182
    - build-tools-23.0.2 # 23.0.2 was not available on build
    - build-tools-23.0.1
    - build-tools-23.0.3
    # The SDK version used to compile your project, also needed for AVDs
    - android-8
    - addon-google_apis-google-8
    - android-10
    - addon-google_apis-google-10
    - android-15
    - addon-google_apis-google-15
    - android-19
    - addon-google_apis-google-19
    - android-21
    - addon-google_apis-google-21
    - android-23
    - addon-google_apis-google-23
    - android-24
    - addon-google_apis-google-24

    - sys-img-armeabi-v7a-google_apis-23
    # (below) needed for compiling the google wrapper module
    - extra-google-google_play_services
    - extra-google-m2repository
    - extra-android-m2repository
    - addon-google_apis-google-19

    # AVDs for testing against
    - sys-img-armeabi-android-8
    - sys-img-armeabi-android-10
    - sys-img-armeabi-android-15
    - sys-img-armeabi-android-19
    - sys-img-armeabi-android-21
    - sys-img-armeabi-v7a-android-10
    - sys-img-armeabi-v7a-google_apis-19
    - sys-img-armeabi-v7a-google_apis-21
    - sys-img-armeabi-v7a-google_apis-15
    - sys-img-armeabi-v7a-google_apis-23
    - sys-img-armeabi-v7a-google_apis-24


sudo: required

# fun fact, travis doesn't really support multiple AVDs running currently for a single build (tried it, build timed out constantly while starting up the AVDs)
# thus we're using a build matrix (which makes more sense anyhow)
env:
    global:
    #minutes (2 minutes by default), prevents CommandShellUnresponsiveExceptions
    - ADB_INSTALL_TIMEOUT=14

    matrix:
    #note when changing these, updating the gradle build file for the GoogleWrapper project
    # first env var is just for display purposes
    - API=8 ANDROID_TARGET=1  ANDROID_ABI=default/armeabi
    - API=10 ANDROID_TARGET=2  ANDROID_ABI=default/armeabi-v7a
    - API=15 ANDROID_TARGET=3  ANDROID_ABI=google_apis/armeabi-v7a
    - API=19 ANDROID_TARGET=4  ANDROID_ABI=google_apis/armeabi-v7a
    - API=23 ANDROID_TARGET=6  ANDROID_ABI=google_apis/armeabi-v7a
    - API=8g ANDROID_TARGET=9  ANDROID_ABI=default/armeabi
    - API=10g ANDROID_TARGET=10  ANDROID_ABI=default/armeabi
    # (above) stopped working sept 2017 unknown reason, the emulator says google services aren't installed
    - API=15g ANDROID_TARGET=11  ANDROID_ABI=default/armeabi-v7a
    # (above) stopped working sept 2017 unknown reason


before_install:
  # create and start emulators
  - export ANDROID_SDK_ROOT=/usr/local/android-sdk/
  - android list targets
  - echo android create avd --force -n test$ANDROID_TARGET -t $ANDROID_TARGET --abi $ANDROID_ABI --sdcard 200M
  - echo no | android create avd --force -n test$ANDROID_TARGET -t $ANDROID_TARGET --abi $ANDROID_ABI --sdcard 200M
  - emulator -memory 1536 -avd test$ANDROID_TARGET -no-skin -no-audio -no-window &
  #- curl https://raw.githubusercontent.com/travis-ci/travis-cookbooks/master/community-cookbooks/android-sdk/files/default/android-wait-for-emulator > android-wait-for-emulator.sh
  #- chmod u+x android-wait-for-emulator.sh
  - android-wait-for-emulator
  - adb shell input keyevent 82 &

# mvn sdk deploy
before_script:
  # android list
  # TEMPORARY comment out of the maven build since it's broken at the moment
  #- mkdir temp
  #- cd temp
  #- git clone https://github.com/simpligility/maven-android-sdk-deployer
  #- cd maven-android-sdk-deployer
  #- mvn clean install -fn -B -U
  #- cd ..
  #- cd ..

  - android-wait-for-emulator
  - adb shell input keyevent 82 &

  #setup for maps forge adapter
  #- wget http://download.mapsforge.org/maps/world/world.map
  - adb shell ls /
  - adb shell ls /sdcard/
  - adb shell ls /sdcard/osmdroid
  - adb root
  - adb shell mount -o rw,remount rootfs /
  - adb shell chmod 777 /mnt/sdcard
  - adb shell mkdir /sdcard/osmdroid/
  - adb push world.map /sdcard/osmdroid/world.map
  #maybe one day it will be added to the repo- adb push ERDC_Whitehorse_GeoPackage.gpkg /sdcard/osmdroid/ERDC_Whitehorse_GeoPackage.gpkg
  #- adb push resources/usgsbase.gemf /sdcard/osmdroid/usgsbase.gemf
  #- adb push resources/usgstopo.sqlite /sdcard/osmdroid/usgstopo.sqlite
  #- adb push resources/usgssat.zip /sdcard/osmdroid/usgssat.zip

#build
script:
  #build using maven with integration tests
  #we build 3 times due to issues with the maven-android-plugin. root cause is unknown but seems to be related to how artifacts are resolved for android projects
  #in case you're wondering -fn means fail never, which loosely means, if the build fails, the exit code is always 0, which is basically all CI engines look for.
  #the dist profile adds the zip and tar outputs of all javadocs and source jars
  #- ./travis.sh
  #- mvn install -fn -B -U -Pdist
  #- mvn install -Pdist
  #- mvn android:undeploy
  #build using gradle
  # travis_wait 30 https://docs.travis-ci.com/user/common-build-problems/#My-builds-are-timing-out
  - ./gradlew -version
  - echo $JAVA_HOME
  - export JAVA_HOME=/usr/lib/jvm/java-7-openjdk-amd64
  - travis_wait 60 ./gradlew clean connectedCheck
  # fun fact, maven runs android tests concurrently for all connected devices, gradle does not
  # since we're using build matrix, each build target compiles the source, fires up it's specific vm, runs the tests, then exits.
  # --stacktrace

after_failure:
  # run this on failure
  - adb pull /sdcard/osmdroid/crash.log
  - cat crash.log
  # dumps the log then exits
  - adb logcat -d