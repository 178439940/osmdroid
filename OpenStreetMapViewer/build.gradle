apply plugin: 'com.android.application'

android {
    defaultConfig {
        applicationId 'org.osmdroid'
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'

    }
    lintOptions {
        abortOnError false
    }
}

apply from: 'https://raw.githubusercontent.com/chrisdoyle/gradle-fury/master/gradle/android-support.gradle'

dependencies {
    compile 'com.android.support:support-v4:23+'
    compile project(':osmdroid-android')
    androidTestCompile 'com.android.support:support-annotations:23+'
    androidTestCompile 'com.android.support.test:runner:0.4.+'
    androidTestCompile 'com.android.support.test:rules:0.4.+'
}


//copy the instrumentation tests from the maven osmdroid-android-it src folder
task copyTestClasses(type: Copy) {
    description 'Copies the osmdroid-android-it maven test classes to androidTest folder.'
    from ("${rootDir}/osmdroid-android-it/src/main/java")
    into "./src/androidTest/java"

}

preBuild.dependsOn copyTestClasses

/*
android.applicationVariants.all { variant ->
    if (variant.getBuildType().name == "debug") {
        variant.connectedInstrumentTest.doFirst {
        //task "configDevice${variant.name.capitalize()}" (type: Exec){
          //  dependsOn variant.install

            //group = 'setPermissions'
            //description = 'Sets API23 style permissions.'

            def adb = android.getAdbExe().toString()
            def mypermission = 'android.permission.INTERNET'
            exec {
                commandLine "echo adb shell pm grant ${variant.applicationId} $mypermission".split(' ')
                commandLine "$adb shell pm grant ${variant.applicationId} $mypermission".split(' ')
            }


            mypermission = 'android.permission.ACCESS_FINE_LOCATION'
            exec {
                commandLine "echo adb shell pm grant ${variant.applicationId} $mypermission".split(' ')
                commandLine "$adb shell pm grant ${variant.applicationId} $mypermission".split(' ')
            }



            mypermission = 'android.permission.WRITE_EXTERNAL_STORAGE'
            exec {
                commandLine "echo adb shell pm grant ${variant.applicationId} $mypermission".split(' ')
                commandLine "$adb shell pm grant ${variant.applicationId} $mypermission".split(' ')
            }

        }
        //variant.testVariant.connectedInstrumentTest.dependsOn "configDevice${variant.name.capitalize()}"
    }
}*/
/*
def adb = android.getAdbExe().toString()

task nameofyourtask(type: Exec, dependsOn: 'installDebug') { // or install{productFlavour}{buildType}
    group = 'nameofyourtaskgroup'
    description = 'Describe your task here.'
    def mypermission = 'android.permission.ACCESS_FINE_LOCATION'
    commandLine "$adb shell pm grant ${variant.applicationId} $mypermission".split(' ')
}
task nameofyourtask2(type: Exec, dependsOn: 'installDebug') { // or install{productFlavour}{buildType}
    group = 'nameofyourtaskgroup'
    description = 'Describe your task here.'
    def mypermission = 'android.permission.WRITE_EXTERNAL_STORAGE'
    commandLine "$adb shell pm grant ${variant.applicationId} $mypermission".split(' ')
}

tasks.whenTaskAdded { task ->
    if (task.name.startsWith('connectedDebugAndroidTest')) { // or connected{productFlavour}{buildType}AndroidTest
        task.dependsOn nameofyourtask
        task.dependsOn nameofyourtask2
    }
}*/


android.applicationVariants.all { variant ->
    if (variant.getBuildType().name == "debug") {
        task "configDevice${variant.name.capitalize()}" (type: Exec){
            dependsOn variant.install

            group = 'nameofyourtaskgroup'
            description = 'Describe your task here.'

            def adb = android.getAdbExe().toString()
            def mypermission = 'android.permission.ACCESS_FINE_LOCATION'
            commandLine "$adb shell pm grant ${variant.applicationId} $mypermission".split(' ')
        }
        variant.testVariant.connectedInstrumentTest.dependsOn "configDevice${variant.name.capitalize()}"
    }
}


android.applicationVariants.all { variant ->
    if (variant.getBuildType().name == "debug") {
        task "configDevice2${variant.name.capitalize()}" (type: Exec){
            dependsOn variant.install

            group = 'nameofyourtaskgroup'
            description = 'Describe your task here.'

            def adb = android.getAdbExe().toString()
            def mypermission = 'android.permission.WRITE_EXTERNAL_STORAGE '
            commandLine "$adb shell pm grant ${variant.applicationId} $mypermission".split(' ')
        }
        variant.testVariant.connectedInstrumentTest.dependsOn "configDevice${variant.name.capitalize()}"
    }
}


android.applicationVariants.all { variant ->
    if (variant.getBuildType().name == "debug") {
        task "configDevice3${variant.name.capitalize()}" (type: Exec){
            dependsOn variant.install

            group = 'nameofyourtaskgroup'
            description = 'Describe your task here.'

            def adb = android.getAdbExe().toString()
            def mypermission = 'android.permission.READ_EXTERNAL_STORAGE '
            commandLine "$adb shell pm grant ${variant.applicationId} $mypermission".split(' ')
        }
        variant.testVariant.connectedInstrumentTest.dependsOn "configDevice${variant.name.capitalize()}"
    }
}